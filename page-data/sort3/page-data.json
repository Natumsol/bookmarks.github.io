{"componentChunkName":"component---src-templates-blog-post-js","path":"/sort3/","result":{"data":{"site":{"siteMetadata":{"title":"Notes.","author":"Natumsol"}},"markdownRemark":{"id":"7a8cffc0-214d-55f8-9a22-1eaf16559015","excerpt":"…","html":"<h1>归并排序</h1>\n<h2>算法描述</h2>\n<p>现在我们来介绍一种很巧妙的排序算法——归并排序。为什么说它巧妙呢，归并排序利用递归来实现分治，从而极大的简化了代码量，排序算法清晰明了，而且速度也是相当的快。归并排序的基本操作是合并两个已排序的表，因为这两个表是已排序的，所以若将输出放到第三个表中，该算法可以通过对输出数据一趟排序来完成。</p>\n<h2>算法的时间复杂度</h2>\n<p>归并的时间复杂度是前三种排序算法里面最好的，为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></p>\n<h1>C 语言实现</h1>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> dataTemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dataTemp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No Space For dataTemp!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> dataTemp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        center <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> center <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> center <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span>dataTemp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> leftPos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rightPos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rightEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> leftEnd <span class=\"token operator\">=</span> rightPos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        tempPos <span class=\"token operator\">=</span> leftPos<span class=\"token punctuation\">,</span>\n        i<span class=\"token punctuation\">,</span>\n        total <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rightEnd <span class=\"token operator\">-</span> leftPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>leftPos <span class=\"token operator\">&lt;=</span> leftEnd <span class=\"token operator\">&amp;&amp;</span> rightPos <span class=\"token operator\">&lt;=</span> rightEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>leftPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span>rightPos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dataTemp<span class=\"token punctuation\">[</span>tempPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>leftPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            dataTemp<span class=\"token punctuation\">[</span>tempPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>rightPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>leftPos <span class=\"token operator\">&lt;=</span> leftEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dataTemp<span class=\"token punctuation\">[</span>tempPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>leftPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>rightPos <span class=\"token operator\">&lt;=</span> rightEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         dataTemp<span class=\"token punctuation\">[</span>tempPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>rightPos <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> rightEnd <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token punctuation\">[</span>rightEnd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dataTemp<span class=\"token punctuation\">[</span>rightEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>JavaScript 实现</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> dataTemp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> center <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">m_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> center <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> center <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> dataTemp<span class=\"token punctuation\">,</span> leftPos<span class=\"token punctuation\">,</span> rightPos<span class=\"token punctuation\">,</span> rightEnd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> leftEnd <span class=\"token operator\">=</span> rightPos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    tempPos <span class=\"token operator\">=</span> leftPos<span class=\"token punctuation\">,</span>\n    total <span class=\"token operator\">=</span> rightEnd <span class=\"token operator\">-</span> leftPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftPos <span class=\"token operator\">&lt;=</span> leftEnd <span class=\"token operator\">&amp;&amp;</span> rightPos <span class=\"token operator\">&lt;=</span> rightEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>leftPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span>rightPos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dataTemp<span class=\"token punctuation\">[</span>tempPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>leftPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      dataTemp<span class=\"token punctuation\">[</span>tempPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>rightPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftPos <span class=\"token operator\">&lt;=</span> leftEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dataTemp<span class=\"token punctuation\">[</span>tempPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>leftPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rightPos <span class=\"token operator\">&lt;=</span> rightEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dataTemp<span class=\"token punctuation\">[</span>tempPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>rightPos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> rightEnd<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">[</span>rightEnd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dataTemp<span class=\"token punctuation\">[</span>rightEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>性能横向测试</h1>\n<ul>\n<li>操作系统：Windows 8 企业版 64 位</li>\n<li>软件平台：Visual Studio 10 和 Nodejs v4.2.1</li>\n<li>测试数据：相同的<code class=\"language-text\">十万条</code>随机生成的数据</li>\n</ul>\n<p><img src=\"/images/blog/20160214/5.png\" alt=\"C语言归并排序\"></p>\n<p><img src=\"/images/blog/20160214/6.png\" alt=\"JavaScript语言归并排序\"></p>","frontmatter":{"title":"常见排序算法的C语言和JavaSript实现之「归并排序」","date":"2016-02-18"},"fields":{"readingTime":{"minutes":1.7}}}},"pageContext":{"slug":"/sort3/","previous":{"fields":{"slug":"/sort2/","readingTime":{"minutes":0.96}},"frontmatter":{"title":"常见排序算法的 C 语言和 JavaSript 实现之「希尔排序」","prologue":"基本排序之希尔排序。","date":"2016-02-14"},"excerpt":"上面我们介绍了在速度上比较慢的，现在我们来介绍一种在速度上秒杀的排序算法——。 希尔排序 算法描述 希尔排序也成为增量排序。希尔排序使用一个序列，叫增量序列。只要，任何增量序列都是可以的。在使用增量的一趟排序后，对于每一个我们有（A…"},"next":{"fields":{"slug":"/sort4/","readingTime":{"minutes":2.455}},"frontmatter":{"title":"常见排序算法的 C 语言和 JavaSript 实现之 「快速排序」","prologue":"基本排序之快速排序。","date":"2016-02-20"},"excerpt":"快速排序 算法描述 快速排序是在事件中已知的最快排序算法，该算法之所以这么快是因为其内部高度优化的内部循环。它的最坏情形耗时，但是稍加修正就可以避免这种情形。和归并排序类似，快速排序也是一种分治的递归排序。对于待排数组，快速排序可以简单的描述为： 如果中的元素个数为 0 或…"}}},"staticQueryHashes":["1006016363","3128451518"]}