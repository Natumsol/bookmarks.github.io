{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-mirco-cmd-loader/","result":{"data":{"site":{"siteMetadata":{"title":"Notes.","author":"Natumsol"}},"markdownRemark":{"id":"21e315ce-1a73-58db-93a1-6ca1bb2d9148","excerpt":"前言 前端模块化是一个老生常谈的话题，模块化的好处是不言而喻，比如易于代码复用、易于维护、易于团队开发 d…","html":"<h1>前言</h1>\n<p>前端模块化是一个老生常谈的话题，模块化的好处是不言而喻，比如易于代码复用、易于维护、易于团队开发 d 等云云。对于前端模块加载器，以前仅仅止步于会用的阶段，为了加深对前端模块化的理解，大概花了一周的时间来学习、调研并尝试自己实现一个简易版的符合<code class=\"language-text\">CMD</code>规范的加载器。</p>\n<h1>设计</h1>\n<p>加载器是按照<code class=\"language-text\">CMD</code>规范进行设计的，具体的<code class=\"language-text\">CMD</code>规范就不列出了，详情请见 <a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">CMD 规范</a>。</p>\n<h2>入口函数 <code class=\"language-text\">use(ids, callback)</code></h2>\n<p><img src=\"/images/blog/20151221/use.png\" alt=\"use\"></p>\n<!-- more -->\n<h2>模块定义函数 <code class=\"language-text\">define(factory)</code></h2>\n<p><img src=\"/images/blog/20151221/define.png\" alt=\"define\"></p>\n<h2>模块加载函数 <code class=\"language-text\">require(id)</code></h2>\n<p><img src=\"/images/blog/20151221/require.png\" alt=\"require\"></p>\n<h2>取得模块接口函数 <code class=\"language-text\">getModuleExports(module)</code></h2>\n<p><img src=\"/images/blog/20151221/getModuleExports.png\" alt=\"define\"></p>\n<h1>代码实现</h1>\n<h2><code class=\"language-text\">use(ids, callback)</code></h2>\n<p><code class=\"language-text\">use</code>为程序启动的入口，主要干两件事：</p>\n<ol>\n<li>加载指定的模块</li>\n<li>待模块加载完成后，调用回调函数</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ids<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>myLoader<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 加载完成， 调用回调函数</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">use</code>会调用<code class=\"language-text\">load</code>函数，这个函数的作用是根据模块的<code class=\"language-text\">id</code>，加载模块，并返回一个<code class=\"language-text\">Promise</code>对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> myLoader<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取得模块或者新建模块 此时模块正在加载或者已经加载完成</span>\n            module<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> exports <span class=\"token operator\">=</span> <span class=\"token function\">getModuleExports</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 加载完成-> 通知调用者</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            module<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">define(factory)</code></h2>\n<p><code class=\"language-text\">define</code>的作用主要是用来定义一个模块。按照<code class=\"language-text\">CMD</code>的规范，定义一个模块的代码类似：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">factory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>为了方便说明，我给匿名函数取名为 factory， factory 就是我们模块定义的工厂函数，它只是 define 函数的一个参数，并不会被直接执行，而是会在需要的时候由专门的函数来调用生成接口。</p>\n<p>所以， 一个模块文件被浏览器下载下来后，并不会直接运行我们的模块定义代码，而是会首先执行一个<code class=\"language-text\">define</code>函数，这个函数会取得模块定义的源代码（通过函数的<code class=\"language-text\">toString()</code>函数来取得源代码），然后利用正则匹配找到依赖的模块（匹配<code class=\"language-text\">require(&quot;dep.js&quot;)</code>这样的字符串），然后加载依赖的模块，最后发射一个自定义事件<code class=\"language-text\">complete</code>，通知<strong>当前模块</strong>， 模块已经加载完成，此时，<strong>当前模块</strong>的就会调用与<code class=\"language-text\">complete</code>事件绑定的回调函数，完成与这个模块相关的任务，比如<code class=\"language-text\">resolve</code>与这个模块加载绑定的<code class=\"language-text\">Promise</code>。\n具体实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentScript</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> myLoader<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  module<span class=\"token punctuation\">.</span>factory <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> dependences <span class=\"token operator\">=</span> <span class=\"token function\">getDependcencs</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dependences<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>dependences<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dep</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>myLoader<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> dep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          module<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依赖加载完成，通知模块。</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          module<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      module<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//没有依赖，通知模块加载完成</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">require(id)</code></h2>\n<p><code class=\"language-text\">require</code>函数比较简单，主要作用就是根据模块<code class=\"language-text\">id</code>获取指定的模块，然后返回这个模块的对外接口。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> myLoader<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>myLoader<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>module<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">\"can not load find module by id:\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getModuleExports</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回模块的对外接口。</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>模块定义代码直到现在，才会被运行。运行模块定义代码的函数就是<code class=\"language-text\">getModuleExports</code>函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">getModuleExports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            module<span class=\"token punctuation\">.</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>记得刚接触<code class=\"language-text\">sea.js</code>的时候，对接口暴露对象<code class=\"language-text\">module</code>和<code class=\"language-text\">exports</code>的区别不是很清楚，学习完别人的源码并尝试自己实现一遍的时候，它们的区别已经非常明朗了：\n<code class=\"language-text\">exports</code>只是<code class=\"language-text\">module.exports</code>的一个引用，单纯的改变 exports 的值并不会对<code class=\"language-text\">module.exports</code>造成任何影响，所以通过</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样的形式来定义接口是无效的。</p>\n<h1>测试</h1>\n<p>DEMO 请见 <a href=\"/project/microCMDLoader\">这里</a></p>\n<p>请打开控制台查看结果</p>\n<h1>总结</h1>\n<p>果然学习技术最好方法之一就是阅读别人的代码。阅读别人的代码是痛苦的，因为代码里充斥这他个人的代码癖好，有时候一个很简单的条件判语句可能用一些 hack 技巧实现了之后，在不了解的情况下，看的就比较痛苦了，以为另有玄机，傻乎乎的看了半天。不过，到最后搞明白之后，还是有些许成就感的。</p>\n<p>前端模块化加载器，以前是只见树木不见森林，通过这次学习，不能说完全搞清楚了一个模块加载器的所有实现细节，但是对于像模块是怎样实现异步加载的，模块是如何定义的，模块间如何进行依赖分析的这些问题有了一个更深的认识和理解。</p>\n<h1>参考资料</h1>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/21157540\">JS 模块加载器加载原理是怎么样的？</a></li>\n<li><a href=\"http://annn.me/how-to-realize-cmd-loader/\">如何实现一个 CMD 模块加载器</a></li>\n<li><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">CMD Specification</a></li>\n</ul>","frontmatter":{"title":"如何构建一个微型的 CMD 模块化加载器","date":"2015-12-21"},"fields":{"readingTime":{"minutes":1.41}}}},"pageContext":{"slug":"/a-mirco-cmd-loader/","previous":{"fields":{"slug":"/base64/","readingTime":{"minutes":2.825}},"frontmatter":{"title":"Base64 的原理、实现及应用","prologue":"因崔斯汀 :)","date":"2015-11-17"},"excerpt":"简介 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2 的 6 次方等于 64，所以每 6 个比特为一个单元，对应某个可打印字符。三个字节有 24 个比特，对应于 4 个单元，即 3 个字节需要用 4 个可打印字符来表示。它可用来作为电子邮件的传输编码。在中的可打印字符包括字母、、数字，这样共有 6…"},"next":{"fields":{"slug":"/no-silver-bullet/","readingTime":{"minutes":0.15}},"frontmatter":{"title":"读《人月神话》","prologue":"《人月神话》和《星月神话》的关系，就是 雷锋 和 雷峰塔 的关系。","date":"2015-12-28"},"excerpt":"没有银弹\n相信大多数人和我一样，第一听到《人月神话》的时候，心中不免会泛起疑惑：一部经典的软件开发著作怎么会配上一个浪漫神话故事的名字？是不是图书管理员搞错了，把小说放到了软件开发的书架上？不过，只要读过本书的第一章，就会恍然大悟：原来“人月”是软件开发估计和进度安排中使用的工作量单位。 这本书是 IBM…"}}},"staticQueryHashes":["1006016363","3128451518"]}