{"componentChunkName":"component---src-templates-blog-post-js","path":"/nginx-basic/","result":{"data":{"site":{"siteMetadata":{"title":"Notes.","author":"Natumsol"}},"markdownRemark":{"id":"1587abf3-d0e1-5ab8-b687-afd649232c81","excerpt":"Nginx 简介 Nginx（发音同 engine x）是一个网页服务器，它能反向代理 HTTP, HTTPS, SMTP, POP3, IMAP 的协议链接，以及一个负载均衡器和一个 HTTP 缓存。与旧版本（<=2.2）的 Apache 不同，nginx…","html":"<h1>Nginx 简介</h1>\n<p>Nginx（发音同 engine x）是一个网页服务器，它能反向代理 HTTP, HTTPS, SMTP, POP3, IMAP 的协议链接，以及一个负载均衡器和一个 HTTP 缓存。与旧版本（&#x3C;=2.2）的 Apache 不同，nginx 不采用每客户机一线程的设计模型，而是充分使用异步逻辑（这一点与<code class=\"language-text\">NodeJS</code>采取了相同的做法，支持高并发，Nginx 在官方测试的结果中，能够支持五万个平行连接，而在实际的运作中，是可以支持二万至四万个平行链接），削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。</p>\n<h1>Nginx 的配置文件</h1>\n<p>使用<code class=\"language-text\">Nginx</code>的方法就是写配置文件，配置文件能完全控制<code class=\"language-text\">Nginx</code>，使<code class=\"language-text\">Nginx</code>按照我们的需求进行运行，所以配置文件的每一项的是干啥的对我们来说就很重要了，具体配置文件各项的含义请参考 <a href=\"https://www.zybuluo.com/phper/note/89391\">nginx.conf 配置文件详解</a>，我这里就不赘述了。</p>\n<h1>反向代理</h1>\n<h2>准备工作</h2>\n<p>什么是<code class=\"language-text\">反向代理</code>？按照我的理解，<code class=\"language-text\">反向代理</code>是相对于<code class=\"language-text\">正向代理</code>来说的，因为他们都是代理，所以我先来解释一下什么是代理。所谓代理，就是在客户端和服务端之间强行添加了一层，用来实现流量转发的功能，粗略的框图如下：</p>\n<!-- more -->\n<pre>\n+----------------+         +---------------+        +--------------+\n|                |         |               |        |              |\n|                |  http   |               | http   |              |\n|    client      <--------->    proxy      <-------->   server     |\n|                |  https  |               | https  |              |\n|                |         |               |        |              |\n+----------------+         +---------------+        +--------------+\n</pre>\n<p>所谓<code class=\"language-text\">正向代理</code>，是用于代理客户端的。举个很简单的例子：你直接在大陆地区访问<code class=\"language-text\">google.com</code>肯定是访问不了的，原因大家都知道，现在假如你有一台在美国的主机 A，并且能够正常访问，那么你可以将浏览器对<code class=\"language-text\">google.com</code>的请求先转发给服务器 A，服务器 A 收到请求后，扮演客户端的角色，发起对<code class=\"language-text\">google.com</code>的请求，服务器 A 收到响应后，又扮演服务端，将此响应原封不动的返回给你，自此，一次正向代理顺利完成。</p>\n<p><code class=\"language-text\">反向代理</code>顾名思义是用来代理服务端的。我们也举个简单的例子来说明：我们知道<code class=\"language-text\">google.com</code>没秒钟要处理如洪水般的网络请求，这些请求如果仅仅让一台单一的服务器处理，肯定是处理不过来的，我们自然而然的想到让多台服务器来处理这些请求，减少每台服务器的压力。但是现在有一个问题，多个服务器那就产生了多个 IP，一般的，<code class=\"language-text\">google.com</code>只能解析到某个固定的 IP（为了方便描述，我们暂且这样认为。实际情况下，通过设置也是可以让同一个域名解析到多个 IP 的），因为现在存在多个 Server，我的一个<code class=\"language-text\">google.com</code>就不能解析到这些服务器上，而且用多个二级域名比如<code class=\"language-text\">server1.google.com</code>，<code class=\"language-text\">server2.google.com</code>等等也给用户造成了使用上的不便（一万台服务器，你咋不上天呢？），那该怎么办呢？通过反向代理可以很好的解决这个问题。为此，我绘制了下面的示意图：</p>\n<pre>\n                                                                   +-------------------+\n                                                                   |                   |\n                                                            +------>   server 1        |\n+-------------+                                             |      |                   |\n|             +----------+                                  |      |                   |\n|  client 1   |          |                                  |      +-------------------+\n|             |          |                                  |\n+-------------+          |                                  |\n                         |         +------------------+     |      +-------------------+\n                         |         |                  |     |      |                   |\n+-------------+          |         |                  |     |      |   server 2        |\n|             |          |         |                  +------------>                   |\n|  clent 2    +-------------------->  reverse proxy   |     |      |                   |\n|             |          |         |                  |     |      +-------------------+\n+-------------+          |         |                  |     |\n                         |         |                  |     |               .\n      .                  |         |                  |     |               .\n      .                  |         +------------------+     |               .\n      .                  |                                  |\n                         |                                  |      +--------------------+\n+-------------+          |                                  |      |                    |\n|             |          |                                  |      |   server m         |\n|  client n   +----------+                                  +------>                    |\n|             |                                                    |                    |\n+-------------+                                                    +--------------------+\n\n</pre>\n<p>而本文的猪脚——Nginx 就是干这个事的。</p>\n<h2>配置反向代理</h2>\n<ol>\n<li>\n<p>我们利用 <a href=\"https://github.com/indexzero/http-server\">http-server</a> 启动一个本地 server。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">http-server -p <span class=\"token number\">3000</span></code></pre></div>\n<p>然后在所在的文件夹里新建一个<code class=\"language-text\">index.html</code>，输入<code class=\"language-text\">hello, nginx</code>。</p>\n</li>\n<li>\n<p>配置 host 文件\n以<code class=\"language-text\">Linux</code>为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/hosts</code></pre></div>\n<p>然后在里面添加一条记录：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">test.com  <span class=\"token number\">127.0</span>.0.1</code></pre></div>\n</li>\n<li>\n<p>配置 nginx.conf\n在<code class=\"language-text\">http</code>里面添加：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\">    <span class=\"token comment\">#本地 http-server 开启的 server，命名为 node-server，监听 3000 端口</span>\n    <span class=\"token keyword\">upstream</span> node<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">server</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># NGINX 虚拟主机，监听 80 端口</span>\n        <span class=\"token keyword\">server_name</span> test<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">access_log</span> <span class=\"token operator\">/</span>var<span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>node<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># Gzip Compression</span>\n        <span class=\"token keyword\">gzip</span> on<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_comp_level</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_vary</span> on<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_min_length</span>  <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_proxied</span> any<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_types</span> text<span class=\"token operator\">/</span>plain text<span class=\"token operator\">/</span>css application<span class=\"token operator\">/</span>json application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>javascript text<span class=\"token operator\">/</span>xml application<span class=\"token operator\">/</span>xml application<span class=\"token operator\">/</span>xml<span class=\"token operator\">+</span>rss text<span class=\"token operator\">/</span>javascript<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_buffers</span> <span class=\"token number\">16</span> <span class=\"token number\">8</span>k<span class=\"token punctuation\">;</span>\n\n       \n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\"># 反向代理 node-server</span>\n          <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>NginX<span class=\"token operator\">-</span><span class=\"token keyword\">Proxy</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>node<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 代理的地址</span>\n          <span class=\"token keyword\">proxy_redirect</span> off<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>启动<code class=\"language-text\">Nginx</code>\n以<code class=\"language-text\">Linux</code>为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> nginx start</code></pre></div>\n</li>\n<li>测试</li>\n</ol>\n<p><img src=\"/images/blog/20160316/1.png\" alt=\"server\"> <img src=\"/images/blog/20160316/2.png\" alt=\"proxy\">\n可以看到，对于用户的请求，我们成功反向代理到<code class=\"language-text\">127.0.0.1:3000</code>上！</p>\n<h1>负载均衡</h1>\n<p><code class=\"language-text\">负载均衡</code>，这个名称听起来刁刁的有木有！其实嘛，也就那回事，不要被这牛逼哄哄的名词吓住了。之前我们分析了<code class=\"language-text\">google.com</code>是怎么对请求进行分流的，现在我们就来小小的试验一下。</p>\n<ol>\n<li>\n<p>另开启一个本地 server</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">http-server -p <span class=\"token number\">3001</span></code></pre></div>\n<p>在此 server 的根目录下新建<code class=\"language-text\">index.html</code>，输入’hello, nginx (server 2)’</p>\n</li>\n<li>\n<p>配置 nginx.conf\n修改之前的配置为：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\">    <span class=\"token comment\">#本地 http-server 开启的 server，命名为 node-server，监听 3000 和 3001 端口</span>\n    <span class=\"token keyword\">upstream</span> node<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># weight 表示权重，数值越大，表示被分配到这个 server 的几率越大，这里我们让其相等。</span>\n        <span class=\"token keyword\">server</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3000</span> weight<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3001</span> weight<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># NGINX 虚拟主机，监听 80 端口</span>\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server_name</span> test<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">access_log</span> <span class=\"token operator\">/</span>var<span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>node<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># Gzip Compression</span>\n        <span class=\"token keyword\">gzip</span> on<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_comp_level</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_vary</span> on<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_min_length</span>  <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_proxied</span> any<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_types</span> text<span class=\"token operator\">/</span>plain text<span class=\"token operator\">/</span>css application<span class=\"token operator\">/</span>json application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>javascript text<span class=\"token operator\">/</span>xml application<span class=\"token operator\">/</span>xml application<span class=\"token operator\">/</span>xml<span class=\"token operator\">+</span>rss text<span class=\"token operator\">/</span>javascript<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">gzip_buffers</span> <span class=\"token number\">16</span> <span class=\"token number\">8</span>k<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 反向代理 node-server</span>\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>NginX<span class=\"token operator\">-</span><span class=\"token keyword\">Proxy</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\"># 代理的地址</span>\n          <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>node<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">proxy_redirect</span> off<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>重启 Nginx\n以<code class=\"language-text\">Linux</code>为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> nginx -s reload</code></pre></div>\n<p>或者</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> nginx restart</code></pre></div>\n</li>\n<li>测试</li>\n</ol>\n<p><img src=\"/images/blog/20160316/1.png\" alt=\"server1\"> <img src=\"/images/blog/20160316/3.png\" alt=\"server2\"></p>\n<p>我们可以看到，对于同一个请求，nginx 会按照权重随机的分配到不同的 server！这样就完成了均衡负载。对于 client 来说，好像就只有一台 server！</p>","frontmatter":{"title":"利用 Nginx 进行反向代理和负载均衡","date":"2016-03-16"},"fields":{"readingTime":{"minutes":2.425}}}},"pageContext":{"slug":"/nginx-basic/","previous":{"fields":{"slug":"/sort4/","readingTime":{"minutes":2.455}},"frontmatter":{"title":"常见排序算法的 C 语言和 JavaSript 实现之 「快速排序」","prologue":"基本排序之快速排序。","date":"2016-02-20"},"excerpt":"快速排序 算法描述 快速排序是在事件中已知的最快排序算法，该算法之所以这么快是因为其内部高度优化的内部循环。它的最坏情形耗时，但是稍加修正就可以避免这种情形。和归并排序类似，快速排序也是一种分治的递归排序。对于待排数组，快速排序可以简单的描述为： 如果中的元素个数为 0 或…"},"next":{"fields":{"slug":"/give-it-five-minutes/","readingTime":{"minutes":3.33}},"frontmatter":{"title":"Give It Five Minutes","prologue":"There are two things in this world that take no skill: 1. Spending other people’s money and 2. Dismissing an idea.","date":"2016-03-23"},"excerpt":"今天在的官网上看到了 这边文章，看完后感触很深，摘录如下，与君共勉。 A few years ago I used to be a hothead. Whenever anyone said anything, I’d think of a way to disagree. I’d push back hard if…"}}},"staticQueryHashes":["1006016363","3128451518"]}