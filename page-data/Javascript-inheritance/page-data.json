{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript-inheritance/","result":{"data":{"site":{"siteMetadata":{"title":"Notes.","author":"Natumsol"}},"markdownRemark":{"id":"677c6ebc-af7a-503f-a89f-28ff778f2be9","excerpt":"Javascript 的继承是基于原型链的继承，这和其它 OO…","html":"<p>Javascript 的继承是基于原型链的继承，这和其它 OO 语言例如<code class=\"language-text\">Java</code>和<code class=\"language-text\">C++</code>是不同的，特别是继承的细节，对初学者来说不容易把握。我（初学者）根据自己的理解和实践，整理归纳如下。</p>\n<h1>什么是原型链？</h1>\n<p>书本没有给出一个明确的定义。我的理解是：每个对象的构造函数都有一个原型对象，每个原型对象都有一个<code class=\"language-text\">constructor</code>和<code class=\"language-text\">__proto__</code>属性，其中<code class=\"language-text\">constructor</code>指向构造函数，<code class=\"language-text\">__proto__</code>属性指向它的父类原型。每当通过构造函数<code class=\"language-text\">new</code>一个对象时，这个新建对象都有一个<code class=\"language-text\">__proto__</code>属性，并指向它的原型对象。这样通过<code class=\"language-text\">__proto__</code>这个指针，一层一层的形成一条“链”，这条“链”就是原型链。整个过程如图所示：</p>\n<p><img src=\"/images/blog/prototype_link.png\" alt=\"原型链\"></p>\n<!-- more -->\n<h1>继承的实现过程</h1>\n<p>知道了什么是原型链后，继承就好理解了。继承就是通过原型链来实现的。下面通过代码来具体说明。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascripta simple introduction to javascript's inheritance\"><pre class=\"language-javascripta simple introduction to javascript's inheritance\"><code class=\"language-javascripta simple introduction to javascript's inheritance\">function superType()\n{\n\tthis.name = &quot;superType&quot;;\n}//超类构造函数\n\nsuperType.prototype.getName = function(){\n\treturn this.name;\n}//超类原型\n\nfunction subType(){\n\tthis.name = &quot;subType&quot;;\n}//子类构造函数\n\nsubType.prototype = new superType(); //将子类的原型指向超类的实例，实现继承\n//subType.prototype.constructor = subType; //最后将构造函数改为子类的构造函数\n\nvar supero = new superType();//实例化超类对象\nvar subo = new subType();//实例化子类对象</code></pre></div>\n<p>上面的代码中我先构造一个父类 superType, 然后构建子类构造函数，接下来<code class=\"language-text\">subType.prototype = new superType();</code>就是继承的关键了，将子类原型指向一个父类的实例，（注意这里，因为父类的实例不是父类的对象原型，只有<code class=\"language-text\">__proto__</code>属性，没有<code class=\"language-text\">constructor</code>属性。）这个父类的实例继续指向父类的原型，实现继承。整个过程如下图所示：</p>\n<p><img src=\"/images/blog/inherit_1.png\" alt=\"继承图示\"></p>\n<p>通过实际调试的结果如下：</p>\n<p><img src=\"/images/blog/inherit_2.png\" alt=\"调试 1\"></p>\n<p>不过这样实现的继承的子类的原型的 constructor 属性指向的是父类的构造函数（不理解？仔细看上一段），所以需要手动改过来，增加一句<code class=\"language-text\">subType.prototype.constructor = subType;</code>。</p>\n<p>调试结果如下：</p>\n<p><img src=\"/images/blog/inherit_3.png\" alt=\"调试 2\"></p>","frontmatter":{"title":"JavaScript 基于原型链的继承原理","date":"2014-07-08"},"fields":{"readingTime":{"minutes":0.39}}}},"pageContext":{"slug":"/Javascript-inheritance/","previous":null,"next":{"fields":{"slug":"/2048-lite/","readingTime":{"minutes":0.215}},"frontmatter":{"title":"2048-Lite，2048 的改进版","prologue":"2048高清重制。","date":"2014-08-03"},"excerpt":"暑假（只有苦逼的两周），在没网没空调的老家咸的蛋疼拿起以前粗制滥造的的 2048 开刀，用面向对象的方法重写了以前用面向过程写的代码。 已完成 UI 全新设计 增加经典模式/练习模式（还有一个生存模式在修 Bug, 没放出来） 增加回退功能，增加调增游戏盘的大小（从 3*3 到*7，要是你愿意，100*10…"}}},"staticQueryHashes":["1006016363","3128451518"]}