{"componentChunkName":"component---src-templates-blog-post-js","path":"/base64/","result":{"data":{"site":{"siteMetadata":{"title":"Notes.","author":"Natumsol"}},"markdownRemark":{"id":"2bfc38f7-a57a-50b2-99d6-5d2f131776a7","excerpt":"简介 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2 的 6 次方等于 64，所以每 6 个比特为一个单元，对应某个可打印字符。三个字节有 24 个比特，对应于 4 个单元，即 3 个字节需要用 4 个可打印字符来表示。它可用来作为电子邮件的传输编码。在中的可打印字符包括字母、、数字，这样共有 6…","html":"<h1>简介</h1>\n<p><code class=\"language-text\">Base64</code>是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2 的 6 次方等于 64，所以每 6 个比特为一个单元，对应某个可打印字符。三个字节有 24 个比特，对应于 4 个<code class=\"language-text\">Base64</code>单元，即 3 个字节需要用 4 个可打印字符来表示。它可用来作为电子邮件的传输编码。在<code class=\"language-text\">Base64</code>中的可打印字符包括字母<code class=\"language-text\">A-Z</code>、<code class=\"language-text\">a-z</code>、数字<code class=\"language-text\">0-9</code>，这样共有 62 个字符，此外的两个可打印符号在不同的系统中而不同，一般为<code class=\"language-text\">+</code>和<code class=\"language-text\">/</code>。</p>\n<h1>转换原理</h1>\n<p>Base64 的直接数据源是二进制序列 (Binary Sequence)。当然，你也可以将图片、文本和音视频转换成二进制序列，再然后转换为 Base64 编码。我们这里讨论的是如何将二进制转换为 Base64 编码，对于如何将图片，文本和音视频转换为二进制序列敬请期待。</p>\n<p>在转换前，先定义一张索引表，这张表规定了如何转换。\n<img src=\"/images/blog/20151118/index.png\" alt=\"索引\">\n转换的时候我们先将二进制序列分组，每 6 个比特为一组。但是如果编码的字节数不能被 3 整除，那么最后就会多出 1 个或两个字节，可以使用下面的方法进行处理：先使用 0 字节值在末尾补足，使其能够被 3 整除，然后再进行 base64 的编码。在编码后的 base64 文本后加上一个或两个’=‘号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个 byte）时，最后一个 6 位的 base64 字节块有四位是 0 值，最后附加上两个等号；如果最后剩余两个八位字节（2 个 byte）时，最后一个 6 位的 base 字节块有两位是 0 值，最后附加一个等号。 参考下表：\n<img src=\"/images/blog/20151118/2.png\" alt=\"索引\"></p>\n<!-- more -->\n<h1>用 JavaScript 实现 Base64</h1>\n<p>原理明白了以后，实现起来就很容易了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//索引表</span>\n\n    <span class=\"token comment\">/**\n     * @author natumsol@gmail.com\n     * @description 将二进制序列转换为 Base64 编码\n     * @param  {String}\n     * @return {String}\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">binToBase64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bitString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> tail <span class=\"token operator\">=</span> bitString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> bitStringTemp1 <span class=\"token operator\">=</span> bitString<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bitString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> bitStringTemp2 <span class=\"token operator\">=</span> bitString<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>bitString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> tail<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bitStringTemp1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bitStringTemp1<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">+=</span> code<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        bitStringTemp2 <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">-</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> code<span class=\"token punctuation\">[</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bitStringTemp2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">-</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @author natumsol@gmail.com\n     * @description 将 base64 编码转换为二进制序列\n     * @param  {String}\n     * @return {String}\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">base64ToBin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> bitString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> decode <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bitString <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">-</span> decode<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> decode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> bitString<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bitString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> tail <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @description 将字符转换为二进制序列\n     * @param  {String} str\n     * @return {String}    \n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">stringToBin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> charCode <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">-</span> charCode<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> charCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * @description 将二进制序列转换为字符串\n     * @param {String} Bin\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">BinToStr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Bin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Bin<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Bin<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">base64</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">binToBase64</span><span class=\"token punctuation\">(</span><span class=\"token function\">stringToBin</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">decodeBase64</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">BinToStr</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64ToBin</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1>将图片数据进行 Base64 编码</h1>\n<p>将图片数据转换为 Base64，首先要获取到图片的二进制数据。图片的二进制数据可以通过<code class=\"language-text\">canvas</code>接口得到。具体实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCanvas</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getCanvas</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>取到图片的二进制数据后，接下来就要进行编码了。因为图片不仅包含像素信息，还包含长度，宽度信息。所以在编码像素信息的同时也应将宽度和高度信息按某一约定进行编码，我是这样处理的：</p>\n<ol>\n<li>将图片的像素数值数据转换为二进制序列；</li>\n<li>将宽度和高度信息组合成字符串<code class=\"language-text\">$$width,height$$</code>，转换为二进制序列；</li>\n<li>将图片像素信息的二进制序列和图片宽高度的二进制序列组合起来，然后再进行 Base64 的编码</li>\n</ol>\n<p>具体实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">img2Base64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> imgData <span class=\"token operator\">=</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> imgWidth <span class=\"token operator\">=</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> imgHeight <span class=\"token operator\">=</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> bin <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imgData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbin <span class=\"token operator\">+=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">numToString</span><span class=\"token punctuation\">(</span>imgData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbin <span class=\"token operator\">=</span> bin <span class=\"token operator\">+</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">stringToBin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$\"</span> <span class=\"token operator\">+</span> imgWidth <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> imgHeight <span class=\"token operator\">+</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">binToBase64</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>将图片 Base64 数据进行解码</h1>\n<p>解码是编码的逆过程。过程大致为：</p>\n<ol>\n<li>将图片的 Base64 信息进行解码，得到包含图片像素信息和宽高度信息的二进制序列；</li>\n<li>然后将这个二进制序列解码成字符串，获取高度和宽度信息；</li>\n<li>去除二进制序列中的高度和宽度信息，得到像素信息；</li>\n<li>根据像素信息生成像素矩阵；</li>\n<li>根据像素矩阵、宽度和高度创建图片对象<code class=\"language-text\">ImageData</code>；</li>\n<li>利用<code class=\"language-text\">putImageData</code>将图像绘制出来。</li>\n</ol>\n<p>具体的代码实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">imgData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myCanvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> imgData<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> imgData<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imgData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">base642img</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">BinToStr</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">base64ToBin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> imgWidth <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\$\\$(\\d+),(\\d+)\\$\\$$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> imgHeight <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\$\\$(\\d+),(\\d+)\\$\\$$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">var</span> imgData <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">base64ToBin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">stringToBin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$\"</span> <span class=\"token operator\">+</span> imgWidth <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> imgHeight <span class=\"token operator\">+</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">var</span> ImageDataArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8ClampedArray</span><span class=\"token punctuation\">(</span>imgWidth <span class=\"token operator\">*</span> imgHeight <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ImageDataArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tImageDataArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>imgData<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">(</span>ImageDataArray<span class=\"token punctuation\">,</span> imgWidth<span class=\"token punctuation\">,</span> imgHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>DEMO 演示</h1>\n<p>在线演示：<a href=\"/project/base64\"> DEMO </a>\n源码请移步 <a href=\"https://github.com/Natumsol/base64\"> Github </a></p>\n<p><img src=\"/images/blog/20151118/1.png\" alt=\"截图\"></p>","frontmatter":{"title":"Base64 的原理、实现及应用","date":"2015-11-17"},"fields":{"readingTime":{"minutes":2.825}}}},"pageContext":{"slug":"/base64/","previous":{"fields":{"slug":"/loading-script/","readingTime":{"minutes":0.185}},"frontmatter":{"title":"图解 script 的三种加载方式","prologue":"因崔斯汀 :)","date":"2015-11-11"},"excerpt":"…"},"next":{"fields":{"slug":"/a-mirco-cmd-loader/","readingTime":{"minutes":1.41}},"frontmatter":{"title":"如何构建一个微型的 CMD 模块化加载器","prologue":"关于CMD模块加载的一切。","date":"2015-12-21"},"excerpt":"前言 前端模块化是一个老生常谈的话题，模块化的好处是不言而喻，比如易于代码复用、易于维护、易于团队开发 d…"}}},"staticQueryHashes":["1006016363","3128451518"]}